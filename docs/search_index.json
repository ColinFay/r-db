[
["index.html", "r-db r-db Licence note on Oracle", " r-db Colin Fay 2019-07-31 r-db A Dockerfile that can install the whole stack of packages from the CRAN task view “Databases”, plus some others. Probably for teaching purpose. Get it with: docker pull colinfay/r-db Once launched, this Docker image has everything needed to connect and interact with the databases listed in the Databases CRAN View, well at least with the one that can be installed with the {ctv} package, plus some others you’ll find listed below. In this book, you’ll also find how to install and interact with these DBMS with other containers. Note that the Task View will be installed with the status it had on the date of the Docker container, which is defined by the version of R used. Each DB has an example code you can run. Most are taken from these packages README / docs. Not all are filled and any help testing / writting example code will be welcome. Licence note on Oracle This Dockerfile uses the Oracle Instant Client driver, and by using this image you agree to Oracle Technology Network License Agreement, available at https://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html for the Oracle elements. "],
["intro.html", "1 Introduction 1.1 Creating Docker network 1.2 Task View Packages", " 1 Introduction 1.1 Creating Docker network Let’s get all these folks wired docker network create r-db Launch rstudio instance: docker run -it -d -e DISABLE_AUTH=true -p 8787:8787 --net r-db colinfay/r-db:3.6.0 \\ &amp;&amp; sleep 2 &amp;&amp; open http://localhost:8787/ 1.2 Task View Packages 1.2.1 Cross database packages {DBI} {DBItest} +{dbplyr} +{dplyr} {odbc} {pointblank} +{sqldf} {tidyr} {TScompare} "],
["google-big-query-bigrquery.html", "2 Google Big Query &amp; {bigrquery}", " 2 Google Big Query &amp; {bigrquery} Todo "],
["dbfaker.html", "3 {dbfaker}", " 3 {dbfaker} Tests needed "],
["elasticsearch-elastic-uptasticsearch.html", "4 elasticsearch &amp; {elastic} / {uptasticsearch}", " 4 elasticsearch &amp; {elastic} / {uptasticsearch} docker pull elasticsearch:7.1.0 docker run -d --name elasticsearch --net r-db -p 9200:9200 -p 9300:9300 \\ -e &quot;discovery.type=single-node&quot; elasticsearch:7.1.0 In RStudio library(elastic) x &lt;- connect(port = 9200, host = &quot;elasticsearch&quot;) if (index_exists(x, &quot;plos&quot;)) index_delete(x, &quot;plos&quot;) plosdat &lt;- system.file(&quot;examples&quot;, &quot;plos_data.json&quot;, package = &quot;elastic&quot;) invisible(docs_bulk(x, plosdat)) Search(x, index = &quot;plos&quot;, size = 1)$hits$hits Tests needed fo {uptasticsearch} "],
["filehashsqlite.html", "5 {filehashSQLite}", " 5 {filehashSQLite} In RStudio: library(filehashSQLite) dbCreate(&quot;myTestDB&quot;, type = &quot;SQLite&quot;) db &lt;- dbInit(&quot;myTestDB&quot;, type = &quot;SQLite&quot;) set.seed(100) db$a &lt;- rnorm(100) db$b &lt;- &quot;a character element&quot; with(db, mean(a)) cat(db$b, &quot;\\n&quot;) "],
["impala-implyr.html", "6 impala &amp; {implyr}", " 6 impala &amp; {implyr} docker pull cloudera/impala-dev:minimal docker run -p 21050:21050 -d --name impala --net r-db cloudera/impala-dev:minimal Not tested yet "],
["influxdb-and-influxdbr.html", "7 InfluxDB and {influxdbr}", " 7 InfluxDB and {influxdbr} docker pull influxdb:1.5 docker run -d --name influxdb --net r-db influxdb:1.5 In RStudio library(influxdbr) library(xts) data(&quot;sample_matrix&quot;) xts_data &lt;- xts::as.xts(x = sample_matrix) xts::xtsAttributes(xts_data) &lt;- list(info = &quot;SampleDataMatrix&quot;, UnitTesting = TRUE, n = 180, source = &quot;xts&quot;) con &lt;- influx_connection(host = &quot;influxdb&quot;, port = 8086) create_database(con = con, db = &quot;mydb&quot;) show_databases(con = con) influx_write(con = con, db = &quot;mydb&quot;, x = xts_data, measurement = &quot;sampledata&quot;) show_databases(con = con) df_data &lt;- dplyr::bind_cols(time = zoo::index(xts_data), # timestamp data.frame(xts_data)) %&gt;% # coredata dplyr::mutate(info = &quot;SampleDataMatrix&quot;, # add tag &#39;info&#39; UnitTesting = TRUE, # add tag &#39;UnitTesting&#39; n = row_number(), # add tag &#39;n&#39; source = &quot;df&quot;) influx_write(con = con, db = &quot;mydb&quot;, x = df_data, time_col = &quot;time&quot;, tag_cols = c(&quot;info&quot;, &quot;UnitTesting&quot;, &quot;n&quot;, &quot;source&quot;), measurement = &quot;sampledata&quot;) "],
["liteq.html", "8 {liteq}", " 8 {liteq} library(liteq) db &lt;- tempfile() q &lt;- ensure_queue(&quot;jobs&quot;, db = db) q list_queues(db) publish(q, title = &quot;First message&quot;, message = &quot;Hello world!&quot;) publish(q, title = &quot;Second message&quot;, message = &quot;Hello again!&quot;) list_messages(q) msg &lt;- try_consume(q) msg "],
["mongodb-mongolite.html", "9 mongodb &amp; {mongolite}", " 9 mongodb &amp; {mongolite} docker pull mongo:3.4 docker run -p 27017:27017 -d --name mongo --net r-db mongo:3.4 Try in RStudio: library(mongolite) a &lt;- mongo(collection = &quot;collection&quot;, db = &quot;db&quot;, url = &quot;mongodb://mongo:27017&quot;) a$insert(iris) a$insert(ggplot2::diamonds) a$count() a$find(&#39;{&quot;cut&quot; : &quot;Premium&quot;, &quot;price&quot; : { &quot;$lt&quot; : 1000 } }&#39;) "],
["pool.html", "10 {pool}", " 10 {pool} In RStudio: library(shiny) library(dplyr) library(pool) pool &lt;- dbPool( drv = RMySQL::MySQL(), dbname = &quot;shinydemo&quot;, host = &quot;shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com&quot;, username = &quot;guest&quot;, password = &quot;guest&quot; ) onStop(function() { poolClose(pool) }) ui &lt;- fluidPage( textInput(&quot;ID&quot;, &quot;Enter your ID:&quot;, &quot;5&quot;), tableOutput(&quot;tbl&quot;), numericInput(&quot;nrows&quot;, &quot;How many cities to show?&quot;, 10), plotOutput(&quot;popPlot&quot;) ) server &lt;- function(input, output, session) { output$tbl &lt;- renderTable({ pool %&gt;% tbl(&quot;City&quot;) %&gt;% filter(ID == input$ID) %&gt;% collect() }) output$popPlot &lt;- renderPlot({ df &lt;- pool %&gt;% tbl(&quot;City&quot;) %&gt;% head(input$nrows) %&gt;% collect() pop &lt;- df$Population names(pop) &lt;- df$Name barplot(pop) }) } shinyApp(ui, server) "],
["couchdb-and-r4couchdb.html", "11 couchdb and {R4CouchDB}", " 11 couchdb and {R4CouchDB} docker pull couchdb:2.3.1 docker run --rm --name couchdb --net r-db couchdb:2.3.1 In R library(R4CouchDB) con &lt;- cdbIni(&quot;couchdb&quot;) con$queryParam &lt;- &quot;count=10&quot; cdbGetUuidS(con) "],
["cassandra-rcassandra.html", "12 Cassandra &amp; `{RCassandra}``", " 12 Cassandra &amp; `{RCassandra}`` docker pull cassandra:2.1 docker run --name cassandra --network r-db -d cassandra:2.1 In RStudio library(RCassandra) con &lt;- RC.connect(host = &quot;cassandra&quot;, port = 9160L) log &lt;- RC.login(con, &quot;cassandra&quot;, &quot;cassandra&quot;) Tests needed "],
["redis-rcppredis-redux.html", "13 redis &amp; {RcppRedis} / {redux}", " 13 redis &amp; {RcppRedis} / {redux} docker pull redis:5.0.5 docker run --rm --name redis --net r-db -d redis:5.0.5 r &lt;- redux::hiredis( url = &quot;redis&quot; ) r$PING() r$SET(&quot;foo&quot;, &quot;bar&quot;) r$GET(&quot;foo&quot;) Tests needed for {RcppRedis} "],
["redis-rcppredis-redux-1.html", "14 redis &amp; {RcppRedis} / {redux}", " 14 redis &amp; {RcppRedis} / {redux} docker pull pivotaldata/gpdb-devel docker run --rm --name gpdb --net r-db pivotaldata/gpdb-devel Tests needed "],
["h2-rh2.html", "15 H2 &amp; {RH2}", " 15 H2 &amp; {RH2} Tests needed "],
["rjdbc.html", "16 {RJDBC}", " 16 {RJDBC} Tests needed "],
["mariadb-rmariadb.html", "17 Mariadb &amp; {RMariaDB}", " 17 Mariadb &amp; {RMariaDB} Show Code docker pull mariadb:10.4.5-bionic docker run --net r-db --name mariadb -e MYSQL_ROOT_PASSWORD=coucou \\ -d mariadb:10.4.5-bionic &amp;&amp; sleep 30 &amp;&amp; \\ docker exec -it mariadb mysql -uroot -pcoucou -e &quot;create database mydb&quot; In RStudio: library(DBI) con &lt;- DBI::dbConnect( RMariaDB::MariaDB(), user = &quot;root&quot;, password = &quot;coucou&quot;, host = &quot;mariadb&quot;, db = &quot;mydb&quot; ) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) "],
["mysql-rmysql.html", "18 MySQL &amp; {RMySQL}", " 18 MySQL &amp; {RMySQL} Show Code docker pull mysql:8.0.16 docker run --net r-db --name mysql -e MYSQL_ROOT_PASSWORD=coucou -d mysql:8.0.16 \\ --default-authentication-plugin=mysql_native_password \\ &amp;&amp; sleep 30 &amp;&amp; docker exec -it mysql mysql -uroot -pcoucou -e &quot;create database mydb&quot; In RStudio library(DBI) con &lt;- DBI::dbConnect( RMariaDB::MariaDB(), user = &quot;root&quot;, password = &quot;coucou&quot;, host = &quot;mysql&quot;, db = &quot;mydb&quot; ) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) "],
["oracle-roracle.html", "19 Oracle &amp; {ROracle}", " 19 Oracle &amp; {ROracle} Tests needed "],
["rpostgis.html", "20 {rpostgis}", " 20 {rpostgis} docker pull mdillon/postgis:9.5-alpine docker run --name some-postgis -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword \\ -d --net r-db mdillon/postgis:9.5-alpine In RStudio: con &lt;- RPostgreSQL::dbConnect( &quot;PostgreSQL&quot;, host = &quot;some-postgis&quot;, dbname = &quot;postgres&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;mysecretpassword&quot; ) install.packages(&quot;rnaturalearth&quot;) ne_world &lt;- rnaturalearth::ne_countries(scale = 50, returnclass = &quot;sf&quot;) library(sf) st_write(ne_world, dsn = con, layer = &quot;ne_world&quot;, overwrite = FALSE, append = FALSE) world_sf &lt;- st_read(con, layer = &quot;ne_world&quot;) query &lt;- paste( &#39;SELECT &quot;name&quot;, &quot;name_long&quot;, &quot;geometry&quot;&#39;, &#39;FROM &quot;ne_world&quot;&#39;, &#39;WHERE (&quot;continent&quot; = \\&#39;Africa\\&#39;);&#39; ) africa_sf &lt;- st_read(con, query = query) "],
["postgresql-and-rpostgres-rpostgresql.html", "21 PostGreSQL and {RPostgres} / {RPostgreSQL}", " 21 PostGreSQL and {RPostgres} / {RPostgreSQL} docker pull postgres:11.3 docker run --rm -e POSTGRES_PASSWORD=docker --name postgre --net r-db postgres:11.3 In RStudio library(DBI) # Connect to a specific postgres database i.e. Heroku con &lt;- dbConnect(RPostgres::Postgres(), dbname = &#39;postgres&#39;, host = &#39;postgre&#39;, port = 5432, user = &#39;postgres&#39;, password = &#39;docker&#39;) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) dbClearResult(res) "],
["rpresto.html", "22 {RPresto}", " 22 {RPresto} docker pull prestashop/prestashop:1.7 Tests needed "],
["rsqlite.html", "23 {RSQLite}", " 23 {RSQLite} In RStudio library(DBI) con &lt;- dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) dbReadTable(con, &quot;mtcars&quot;) "],
["references.html", "References", " References "]
]
