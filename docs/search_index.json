[
["index.html", "r-db r-db About How to read Special thanks", " r-db Colin Fay 2019-09-05 r-db r-db is a Dockerfile that can install the whole stack of packages from the CRAN task view “Databases”, plus some others. You can use it for teaching/learning to use these db. Probably for production, but I don’t warrant anything with this, so you should definitely audit the Dockerfile before using it. Please also check the License file before using. Get it with: docker pull colinfay/r-db Once launched, this Docker image has everything needed to connect and interact with the databases listed in the Databases CRAN View, well at least with the one that can be installed with the {ctv} package, plus some others that might come in the future. About In this book, you’ll also find how to install and interact with these DBMS with other containers. Note that the Task View will be installed with the status it had on the date of the Docker container, which is defined by the version of R used. Each DB has an example code you can run. Most are taken from these packages README / docs. Not all are filled and any help testing / writting example code will be welcome. How to read The Introduction section describes you how to build a docker network to connect the r-db image with other Docker images so that you’re able to test the packages to connect to databases. Special thanks This work has been made possible by the massive work undertaken by Dirk Eddelbuettel and Carl Boettiger with the rocker project. Yuan Tang for maintaining the database task view. "],
["intro.html", "1 Introduction 1.1 Creating Docker network 1.2 Task View Packages", " 1 Introduction 1.1 Creating Docker network Let’s get all these folks wired docker network create r-db Launch rstudio instance: docker run -it -d -e DISABLE_AUTH=true -p 8787:8787 --net r-db colinfay/r-db:3.6.0 \\ &amp;&amp; sleep 2 &amp;&amp; open http://localhost:8787/ 1.2 Task View Packages 1.2.1 Cross database packages {DBI} {DBItest} +{dbplyr} +{dplyr} {odbc} {pointblank} +{sqldf} {tidyr} {TScompare} "],
["google-big-query-bigrquery.html", "2 Google Big Query &amp; {bigrquery}", " 2 Google Big Query &amp; {bigrquery} BigQuery is a web service from Google that is used for handling or analyzing big data. It is part of the Google Cloud Platform. As a NoOps (no operations) data analytics service, BigQuery offers users the ability to manage data using fast SQL-like queries for real-time analysis. BigQuery is considered an example of infrastructure as a service (IaaS). This tool can be used with Apache Hadoop or other frameworks to handle large data sets. BigQuery also provides a REST API, which uses the Representational State Transfer (REST) model for open and transparent collaboration.Using data in BigQuery means that the data needs to be uploaded first to Google Storage. BigQuery has an API that can be used to integrate this process into the data analysis. BigQuery is compatible with SQL queries and can be used with Google Apps Script, Google Spreadsheets and other Google services.eval(ez_write_tag([[250,250],'techopedia_com-under_second_paragraph','ezslot_6',128,'0', 0])); From: https://www.techopedia.com/definition/31282/bigquery Todo "],
["dbfaker.html", "3 {dbfaker}", " 3 {dbfaker} Tests needed "],
["elasticsearch-elastic-uptasticsearch.html", "4 elasticsearch &amp; {elastic} / {uptasticsearch}", " 4 elasticsearch &amp; {elastic} / {uptasticsearch} docker pull elasticsearch:7.1.0 docker run -d --name elasticsearch --net r-db -p 9200:9200 -p 9300:9300 \\ -e &quot;discovery.type=single-node&quot; elasticsearch:7.1.0 In RStudio library(elastic) x &lt;- connect(port = 9200, host = &quot;elasticsearch&quot;) if (index_exists(x, &quot;plos&quot;)) index_delete(x, &quot;plos&quot;) plosdat &lt;- system.file(&quot;examples&quot;, &quot;plos_data.json&quot;, package = &quot;elastic&quot;) invisible(docs_bulk(x, plosdat)) Search(x, index = &quot;plos&quot;, size = 1)$hits$hits Tests needed fo {uptasticsearch} "],
["filehashsqlite.html", "5 {filehashSQLite}", " 5 {filehashSQLite} In RStudio: library(filehashSQLite) dbCreate(&quot;myTestDB&quot;, type = &quot;SQLite&quot;) db &lt;- dbInit(&quot;myTestDB&quot;, type = &quot;SQLite&quot;) set.seed(100) db$a &lt;- rnorm(100) db$b &lt;- &quot;a character element&quot; with(db, mean(a)) cat(db$b, &quot;\\n&quot;) "],
["impala-implyr.html", "6 impala &amp; {implyr}", " 6 impala &amp; {implyr} Impala is a type of software tool that is known as a query engine. It is licensed by Apache and runs on the open-source Apache Hadoop big data analytics platform. The Cloudera company, an IT vendor, promotes Impala as an open-source product that gives users the ability to perform Hadoop queries in real time, using easy commands that are conventional in database queries. Users can utilize the Impala tool to search data stored in Hadoop HDFS or in other structures like HBase. Part of the specifics around the Impala tool involve how it works with MapReduce, which is a batch-processing element of Hadoop. The makers of Impala explain that the program works around MapReduce for direct access to data. They also contrast this tool with Apache Hive, another open-source data analysis tool offered by the Apache Foundation, and claim that Impala can be quite a bit faster, while some network bottlenecks are eliminated. eval(ez_write_tag([[250,250],'techopedia_com-under_second_paragraph','ezslot_6',128,'0', 0])); From: https://www.techopedia.com/definition/30158/impala docker pull cloudera/impala-dev:minimal docker run -p 21050:21050 -d --name impala --net r-db cloudera/impala-dev:minimal Not tested yet "],
["influxdb-and-influxdbr.html", "7 InfluxDB and {influxdbr}", " 7 InfluxDB and {influxdbr} docker pull influxdb:1.5 docker run -d --name influxdb --net r-db influxdb:1.5 In RStudio library(influxdbr) library(xts) data(&quot;sample_matrix&quot;) xts_data &lt;- xts::as.xts(x = sample_matrix) xts::xtsAttributes(xts_data) &lt;- list(info = &quot;SampleDataMatrix&quot;, UnitTesting = TRUE, n = 180, source = &quot;xts&quot;) con &lt;- influx_connection(host = &quot;influxdb&quot;, port = 8086) create_database(con = con, db = &quot;mydb&quot;) show_databases(con = con) influx_write(con = con, db = &quot;mydb&quot;, x = xts_data, measurement = &quot;sampledata&quot;) show_databases(con = con) df_data &lt;- dplyr::bind_cols(time = zoo::index(xts_data), # timestamp data.frame(xts_data)) %&gt;% # coredata dplyr::mutate(info = &quot;SampleDataMatrix&quot;, # add tag &#39;info&#39; UnitTesting = TRUE, # add tag &#39;UnitTesting&#39; n = row_number(), # add tag &#39;n&#39; source = &quot;df&quot;) influx_write(con = con, db = &quot;mydb&quot;, x = df_data, time_col = &quot;time&quot;, tag_cols = c(&quot;info&quot;, &quot;UnitTesting&quot;, &quot;n&quot;, &quot;source&quot;), measurement = &quot;sampledata&quot;) "],
["liteq.html", "8 {liteq}", " 8 {liteq} library(liteq) db &lt;- tempfile() q &lt;- ensure_queue(&quot;jobs&quot;, db = db) q list_queues(db) publish(q, title = &quot;First message&quot;, message = &quot;Hello world!&quot;) publish(q, title = &quot;Second message&quot;, message = &quot;Hello again!&quot;) list_messages(q) msg &lt;- try_consume(q) msg "],
["mongodb-mongolite.html", "9 mongodb &amp; {mongolite}", " 9 mongodb &amp; {mongolite} MongoDB is a cross-platform and open-source document-oriented database, a kind of NoSQL database. As a NoSQL database, MongoDB shuns the relational database’s table-based structure to adapt JSON-like documents that have dynamic schemas which it calls BSON. This makes data integration for certain types of applications faster and easier. MongoDB is built for scalability, high availability and performance from a single server deployment to large and complex multi-site infrastructures. MongoDB was first developed by MongoDB Inc., known then as 10gen, in October 2007 originally as a major part in a PaaS (Platform as a Service) product similar to Windows Azure and Google App Engine. The development was shifted to open source in 2009. MongoDB became one of the most popular NoSQL databases, being used as the backend for many major websites including eBay, Craigslist, SourceForge and The New York Times. MongoDB is available under the GNU Affero General Public License while its language drivers are available under the Apache License. There are also commercial licenses being offered. MongoDB features: Ad hoc queries - supports search by field, regular expression searches, and range queries. Indexing - any field in the BSON document can be indexed. Replication - provides high availability via replica sets which consists of two or more copies of the original data. Load balancing - sharding is the method used to allow MongoDB to scale horizontally, meaning that data will be distributed and split into ranges and then stored in different shards which can be located in different servers. Shard keys are used to determine how the data will be distributed. Aggregation - MapReduce can be applied to enable batch processing of data as well as perform aggregation operations. File storage - MongoDB can be used as file system which makes use of the above functions and acting in a distributed manner through sharding. From: https://www.techopedia.com/definition/30340/mongodb docker pull mongo:3.4 docker run -p 27017:27017 -d --name mongo --net r-db mongo:3.4 Try in RStudio: library(mongolite) a &lt;- mongo(collection = &quot;collection&quot;, db = &quot;db&quot;, url = &quot;mongodb://mongo:27017&quot;) a$insert(iris) a$insert(ggplot2::diamonds) a$count() a$find(&#39;{&quot;cut&quot; : &quot;Premium&quot;, &quot;price&quot; : { &quot;$lt&quot; : 1000 } }&#39;) "],
["pool.html", "10 {pool}", " 10 {pool} In RStudio: library(shiny) library(dplyr) library(pool) pool &lt;- dbPool( drv = RMySQL::MySQL(), dbname = &quot;shinydemo&quot;, host = &quot;shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com&quot;, username = &quot;guest&quot;, password = &quot;guest&quot; ) onStop(function() { poolClose(pool) }) ui &lt;- fluidPage( textInput(&quot;ID&quot;, &quot;Enter your ID:&quot;, &quot;5&quot;), tableOutput(&quot;tbl&quot;), numericInput(&quot;nrows&quot;, &quot;How many cities to show?&quot;, 10), plotOutput(&quot;popPlot&quot;) ) server &lt;- function(input, output, session) { output$tbl &lt;- renderTable({ pool %&gt;% tbl(&quot;City&quot;) %&gt;% filter(ID == input$ID) %&gt;% collect() }) output$popPlot &lt;- renderPlot({ df &lt;- pool %&gt;% tbl(&quot;City&quot;) %&gt;% head(input$nrows) %&gt;% collect() pop &lt;- df$Population names(pop) &lt;- df$Name barplot(pop) }) } shinyApp(ui, server) "],
["couchdb-and-r4couchdb.html", "11 couchdb and {R4CouchDB}", " 11 couchdb and {R4CouchDB} Apache CouchDB is a non-relational or NoSQL database which was developed to fully embrace the web. Data is stored within JSON documents which can be accessed and its indices queried via HTTP. Indexing, transforming and combining of documents are performed through JavaScript. Because it uses all of these web-friendly standards and technologies, CouchDB works very well with web and mobile applications. CouchDB is an open source document-oriented database which uses key-value maps for storing document fields. The fields can be simple key-value pairs, maps, or lists. Each document stored is given a document-level unique identifier and a revision number whenever there are changes made to it. CouchDB is able to do on-the-fly document transformation as well as present real-time change notifications, making web applications development easier.eval(ez_write_tag([[250,250],'techopedia_com-under_second_paragraph','ezslot_5',128,'0', 0])); It specializes in Availability and Partition Tolerance (AP) but can eventually be consistent through minor work. As a comparison, MongoDB is mostly Consistency and Partition Tolerant. CouchDB features: Quick indexing and retrievalEasy replication across multiple server instancesMultiple libraries for different languagesJSON-based document formatREST-like interface for document retrieval, deletion, updates and insertionData feed updates which are subscribable through the changes feed From: https://www.techopedia.com/definition/30316/couchdb docker pull couchdb:2.3.1 docker run --rm --name couchdb --net r-db couchdb:2.3.1 In R library(R4CouchDB) con &lt;- cdbIni(&quot;couchdb&quot;) con$queryParam &lt;- &quot;count=10&quot; cdbGetUuidS(con) "],
["cassandra-rcassandra.html", "12 Cassandra &amp; {RCassandra}", " 12 Cassandra &amp; {RCassandra} Apache Cassandra is an open-source NoSQL distributed database management system. It was originally developed at Facebook by Avinash Lakshman and Prashant Malik. Version 2.0.7 was released on April 14, 2014. Apache Cassandra uses the NoSQL system instead of the traditional relational database management system (RDBMS) because the latter is not well suited for handling large volumes of unstructured data, such as those produced by websites or online companies. NoSQL has a simpler design and supports horizontal scaling, which allows the addition of new servers for better performance.Cassandra uses a peer-to-peer architecture instead of the master/slave setup used in RDBMSs. There is no master server in the former like in peer-to-peer file sharing. If a master server stalls or breaks down because of numerous requests, the slave servers are rendered useless, whereas in a peer-to-peer setup, every database cluster is equal and can accept requests from any client. As a result, Cassandra has no single point of failure. From: https://www.techopedia.com/definition/30169/apache-cassandra docker pull cassandra:2.1 docker run --name cassandra --network r-db -d cassandra:2.1 In RStudio library(RCassandra) con &lt;- RC.connect(host = &quot;cassandra&quot;, port = 9160L) log &lt;- RC.login(con, &quot;cassandra&quot;, &quot;cassandra&quot;) Tests needed "],
["redis-rcppredis-redux.html", "13 redis &amp; {RcppRedis} / {redux}", " 13 redis &amp; {RcppRedis} / {redux} Redis is an advanced key-value store, better known as a data-structure server. It can be considered as a type of database which works with key-value pairs and uses main memory for storing data. Its use of main memory means that it is both fast and scalable, but may be confined by the capacity of the RAM. It also has built-in persistence though snapshotting and journalizing to disk so it can be used as a No SQL database. Redis is described as an advanced key-value store rather than an outright database because of the way it stores data as key-value pairs which can contain strings, lists, hash sets, and sorted sets. It works with an in-memory dataset in order to achieve outstanding performance and it can run atomic operations such as appending strings, incrementing hash values, finding and retrieving members in a list, computing set intersection, union and difference, and more. Depending on the use case for which Redis is implemented on, data can be made to persist by dumping the dataset on the disk or by appending each command to a log. Redis is open sourced and is BSD licensed. It was developed by Salvatore Sanfilippo and was initially released on April 10, 2009. The program is written in ANSI C and is thoroughly tested for POSIX systems such as Linux, BSD, and OSX. There is no official Windows version, but Microsoft develops and maintains a Windows 32- and 64-bit experimental version. From: https://www.techopedia.com/definition/30360/redis docker pull redis:5.0.5 docker run --rm --name redis --net r-db -d redis:5.0.5 r &lt;- redux::hiredis( url = &quot;redis&quot; ) r$PING() r$SET(&quot;foo&quot;, &quot;bar&quot;) r$GET(&quot;foo&quot;) Tests needed for {RcppRedis} "],
["greenplum.html", "14 greenplum", " 14 greenplum docker pull pivotaldata/gpdb-devel docker run --rm --name gpdb --net r-db pivotaldata/gpdb-devel Tests needed "],
["h2-rh2.html", "15 H2 &amp; {RH2}", " 15 H2 &amp; {RH2} Tests needed "],
["rjdbc.html", "16 {RJDBC}", " 16 {RJDBC} Tests needed "],
["mariadb-rmariadb.html", "17 Mariadb &amp; {RMariaDB}", " 17 Mariadb &amp; {RMariaDB} docker pull mariadb:10.4.5-bionic docker run --net r-db --name mariadb -e MYSQL_ROOT_PASSWORD=coucou \\ -d mariadb:10.4.5-bionic &amp;&amp; sleep 30 &amp;&amp; \\ docker exec -it mariadb mysql -uroot -pcoucou -e &quot;create database mydb&quot; In RStudio: library(DBI) con &lt;- DBI::dbConnect( RMariaDB::MariaDB(), user = &quot;root&quot;, password = &quot;coucou&quot;, host = &quot;mariadb&quot;, db = &quot;mydb&quot; ) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) "],
["mysql-rmysql.html", "18 MySQL &amp; {RMySQL}", " 18 MySQL &amp; {RMySQL} MySQL is a full-featured relational database management system (RDBMS) that competes with the likes of Oracle DB and Microsoft’s SQL Server. MySQL is sponsored by the Swedish company MySQL AB, which is owned by Oracle Corp. However, the MySQL source code is freely available because it was originally developed as freeware. MySQL is written in C and C++ and is compatible with all major operating systems. MySQL was a free-software database engine originally developed and first released in 1995. MySQL is named after My, the daughter Michael Widenius, of one of the product’s originators. It was originally produced under the GNU General Public License, in which source code is made freely available. MySQL is very popular for Web-hosting applications because of its plethora of Web-optimized features like HTML data types, and because it's available for free. It is part of the Linux, Apache, MySQL, PHP (LAMP) architecture, a combination of platforms that is frequently used to deliver and support advanced Web applications. MySQL runs the back-end databases of some famous websites, including Wikipedia, Google and Facebook- a testament to its stability and robustness despite its decentralized, free-for-all philosophy. MySQL was originally owned by Sun Microsystems; when the company was purchased by Oracle Corp. in 2010, MySQL was part of the package. Although MySQL is technically considered a competitor of Oracle DB, Oracle DB is mainly used by large enterprises, while MySQL is used by smaller, more Web-oriented databases. In addition, MySQL differs from Oracle's product because it's in the public domain. From: https://www.techopedia.com/definition/3498/mysql docker pull mysql:8.0.16 docker run --net r-db --name mysql -e MYSQL_ROOT_PASSWORD=coucou -d mysql:8.0.16 \\ --default-authentication-plugin=mysql_native_password \\ &amp;&amp; sleep 30 &amp;&amp; docker exec -it mysql mysql -uroot -pcoucou -e &quot;create database mydb&quot; In RStudio library(DBI) con &lt;- DBI::dbConnect( RMariaDB::MariaDB(), user = &quot;root&quot;, password = &quot;coucou&quot;, host = &quot;mysql&quot;, db = &quot;mydb&quot; ) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) "],
["oracle-roracle.html", "19 Oracle &amp; {ROracle}", " 19 Oracle &amp; {ROracle} Oracle database (Oracle DB) is a relational database management system (RDBMS) from the Oracle Corporation. Originally developed in 1977 by Lawrence Ellison and other developers, Oracle DB is one of the most trusted and widely-used relational database engines.The system is built around a relational database framework in which data objects may be directly accessed by users (or an application front end) through structured query language (SQL). Oracle is a fully scalable relational database architecture and is often used by global enterprises, which manage and process data across wide and local area networks. The Oracle database has its own network component to allow communications across networks.Oracle DB is also known as Oracle RDBMS and, sometimes, just Oracle. Oracle DB rivals Microsoft’s SQL Server in the enterprise database market. There are other database offerings, but most of these command a tiny market share compared to Oracle DB and SQL Server. Fortunately, the structures of Oracle DB and SQL Server are quite similar, which is a benefit when learning database administration.Oracle DB runs on most major platforms, including Windows, UNIX, Linux and Mac OS. Different software versions are available, based on requirements and budget. Oracle DB editions are hierarchically broken down as follows:eval(ez_write_tag([[250,250],'techopedia_com-under_second_paragraph','ezslot_5',128,'0', 0]));Enterprise Edition: Offers all features, including superior performance and security, and is the most robust Standard Edition: Contains base functionality for users that do not require Enterprise Edition’s robust package Express Edition (XE): The lightweight, free and limited Windows and Linux edition Oracle Lite: For mobile devicesA key feature of Oracle is that its architecture is split between the logical and the physical. This structure means that for large-scale distributed computing, also known as grid computing, the data location is irrelevant and transparent to the user, allowing for a more modular physical structure that can be added to and altered without affecting the activity of the database, its data or users. The sharing of resources in this way allows for very flexible data networks whose capacity can be adjusted up or down to suit demand, without degradation of service. It also allows for a robust system to be devised as there is no single point at which a failure can bring down the database, as the networked schema of the storage resources means that any failure would be local only. From: https://www.techopedia.com/definition/8711/oracle-database Tests needed "],
["rpostgis.html", "20 {rpostgis}", " 20 {rpostgis} docker pull mdillon/postgis:9.5-alpine docker run --name some-postgis -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword \\ -d --net r-db mdillon/postgis:9.5-alpine In RStudio: con &lt;- RPostgreSQL::dbConnect( &quot;PostgreSQL&quot;, host = &quot;some-postgis&quot;, dbname = &quot;postgres&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;mysecretpassword&quot; ) install.packages(&quot;rnaturalearth&quot;) ne_world &lt;- rnaturalearth::ne_countries(scale = 50, returnclass = &quot;sf&quot;) library(sf) st_write(ne_world, dsn = con, layer = &quot;ne_world&quot;, overwrite = FALSE, append = FALSE) world_sf &lt;- st_read(con, layer = &quot;ne_world&quot;) query &lt;- paste( &#39;SELECT &quot;name&quot;, &quot;name_long&quot;, &quot;geometry&quot;&#39;, &#39;FROM &quot;ne_world&quot;&#39;, &#39;WHERE (&quot;continent&quot; = \\&#39;Africa\\&#39;);&#39; ) africa_sf &lt;- st_read(con, query = query) "],
["postgresql-and-rpostgres-rpostgresql.html", "21 PostGreSQL and {RPostgres} / {RPostgreSQL}", " 21 PostGreSQL and {RPostgres} / {RPostgreSQL} PostgreSQL is an open-source, object-relational database management system (ORDBMS) that is not owned or controlled by one company or individual. Because postgresSQL software is open-source, it is managed mostly through a coordinated online effort by an active global community of developers, enthusiasts and other volunteers. First released in the mid-1990s, postgresSQL is written in C. Its primary competitors include Oracle DB, SQL Server and MySQL.This term is also known as Postgres. PostgresSQL and ingres, an earlier effort, were both developed by a team at the University of California at Berkeley. PostgresSQL did not originally support structured query language (SQL) -- QUEL query language was used until 1994, when SQL support was added. In 1996, the first official open-source software version of PostgresSQL was released. PostgresSQL supports almost all relational database features and offers a few unusual features that are normally absent in other RDBMS engines. Commonly supported objects include views, stored procedures, indexes, triggers and object-defined data types, in addition to general RDBMS features such as primary keys, foreign key relationships and atomicity. Certain critical postgresSQL features are similar to Oracle DB and other database engines; such features include the use of concepts like tablespaces, savepoints and point-in-time recovery. From: https://www.techopedia.com/definition/3499/postgresql docker pull postgres:11.3 docker run --rm -e POSTGRES_PASSWORD=docker --name postgre --net r-db postgres:11.3 In RStudio library(DBI) # Connect to a specific postgres database i.e. Heroku con &lt;- dbConnect(RPostgres::Postgres(), dbname = &#39;postgres&#39;, host = &#39;postgre&#39;, port = 5432, user = &#39;postgres&#39;, password = &#39;docker&#39;) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) dbFetch(res) dbClearResult(res) "],
["rpresto.html", "22 {RPresto}", " 22 {RPresto} docker pull prestashop/prestashop:1.7 Tests needed "],
["rsqlite.html", "23 {RSQLite}", " 23 {RSQLite} SQLite is an in-process library that implements a self-contained, zero-configuration, serverless, transactional SQL database engine. The source code for SQLite exists in the public domain and is free for both private and commercial purposes.SQLite has bindings to several programming languages such as C, C++, BASIC, C#, Python, Java and Delphi. The COM (ActiveX) wrapper makes SQLite accessible to scripted languages on Windows such as VB Script and JavaScript, thus adding capabilities to HTML applications. It is also available in embedded operating systems such as iOS, Android, Symbian OS, Maemo, Blackberry and WebOS because of its small size and ease of use. SQLite is atomicity, consistency, isolation, durability (ACID) compliant. This embedded relational database management system is contained in a small C programming library and is an integral part of client-based applications. SQLite uses a dynamic SQL syntax and performs multitasking to do reads and writes at the same time. The reads and writes are done directly to ordinary disk files. An SQLite library is called dynamically and application programs use SQLite functionality through simple function calls, reducing latency in database access. These programs store entire databases as single cross-platform files on host machines. This simple design is implemented by locking the entire database file during a write. SQLite implements the SQL-92 standard for SQL and uses an unusual system for SQL compatible database management systems. Types are assigned to individual values, adding flexibility to columns when bound to dynamic scripting languages. Full unicode support in SQLIte is optional. From: https://www.techopedia.com/definition/24610/sqlite In RStudio library(DBI) con &lt;- dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) dbListTables(con) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) dbReadTable(con, &quot;mtcars&quot;) "],
["references.html", "References", " References "]
]
